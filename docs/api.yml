openapi: 3.0.0
info:
  title: MOCBOT API
  description: |-
    This document outlines the specifications behind the MOCBOT API

    Some useful links:
    - The [MOCBOT API](https://github.com/MasterOfCubesAU/mocbot-api) repository
  contact:
    email: masterofcubesau@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about MOCBOT
  url: https://mocbot.masterofcubesau.com
servers:
  - url: https://api.masterofcubesau.com/v1
tags:
  - name: User XP
    description: User XP operations
  - name: Guild XP
    description: Guild XP operations
  - name: User Warnings
    description: User Warning operations
  - name: Guild Warnings
    description: Guild Warning operations
  - name: Settings
    description: Guild Settings operations
  - name: Warnings
    description: General Warning operations
paths:
  /xp/{guild_id}:
    get:
      tags:
        - Guild XP
      summary: Fetch All Guild XP
      description: |-
        This route fetches XP data for all users in a guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to fetch XP data for
      responses:
        "200":
          description: OK. Returns a list of User XP objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuildXP"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
    delete:
      tags:
        - Guild XP
      summary: Remove All Guild XP
      description: |-
        This route removes XP data for all users of a guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to remove
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
  /xp/{guild_id}/{user_id}:
    post:
      tags:
        - User XP
      summary: Add XP for a new user
      requestBody:
        description: The XP data to add for this user
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserXPRequest"
      description: |-
        This route creates a new XP object for a user
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID of the new user
      responses:
        "200":
          description: OK. Returns the new XP object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserXP"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          description: XP data for this user in this guild already exists
    get:
      tags:
        - User XP
      summary: Fetches User XP
      description: |-
        This route fetches XP data for a user in a guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID you would like to fetch XP data for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserXP"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild/User ID not found
    patch:
      tags:
        - User XP
      summary: Update the XP for an existing user
      description: |-
        This route updates an existing XP object for a user
      requestBody:
        description: An object with only the XP data to update for this guild
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserXPRequest"
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID of the user
      responses:
        "200":
          description: OK. Returns the users XP object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserXP"
        "400":
          description: New data not provided
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild/User ID not found
    put:
      tags:
        - User XP
      summary: Replaces existing XP data for a user
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID of the user
      requestBody:
        description: The XP data to set
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplaceUserXPInput"
      responses:
        "200":
          description: OK. Returns the users XP object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserXP"
        "400":
          description: New data not provided/some fields are missing
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild/User ID not found
    delete:
      tags:
        - User XP
      summary: Remove User XP
      description: |-
        This route removes an existing XP object for a user
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID of the user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild/User ID not found
  /settings/{guild_id}:
    post:
      tags:
        - Settings
      summary: Creates a configuration entry for a server
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to create settings for
      requestBody:
        description: The settings to add for this guild
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses:
        "200":
          description: OK. Returns the new settings that were added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: Settings were not provided
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "409":
          description: Settings for the guild already exist
    get:
      tags:
        - Settings
      summary: Fetches the current configuration for a server
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to fetch settings for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
    patch:
      tags:
        - Settings
      summary: Updates an existing configuration for a server
      requestBody:
        description: An object with only the settings to update for this guild
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to update settings for
      responses:
        "200":
          description: OK. Returns the new complete configuration object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: New settings was not provided
        "404":
          description: Guild ID not found
    put:
      tags:
        - Settings
      summary: Replaces an existing configuration with a new configuration
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to replace settings for
      requestBody:
        description: The settings to set for this guild
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses:
        "200":
          description: OK. Returns the new settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: New settings were not provided
        "404":
          description: Guild ID not found
    delete:
      tags:
        - Settings
      summary: Removes a configuration entry for a server
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to remove settings for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
  /warnings/{guild_id}:
    get:
      tags:
        - Guild Warnings
      summary: Fetch all warnings for a server
      description: |-
        This route fetches all warnings for a given guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to fetch warning data for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GuildWarnings"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
    delete:
      tags:
        - Guild Warnings
      summary: Removes all server related warnings
      description: |-
        This route removes all warnings for a given guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID you would like to remove warning data for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild ID not found
  /warnings/{guild_id}/{user_id}:
    post:
      tags:
        - User Warnings
      summary: Creates a warning for a user
      description: |-
        This route creates a new warning for a user in a given guild
      requestBody:
        description: The warning metadata
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWarningRequest"
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user is from
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID of the user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWarning"
        "400":
          description: Reason or AdminID is missing
        "401":
          $ref: "#/components/responses/NotAuthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWarning"
    get:
      tags:
        - User Warnings
      summary: Fetch User Warnings
      description: |-
        This route fetches all warnings for a user in a given guild
      parameters:
        - name: guild_id
          in: path
          schema:
            type: integer
          required: true
          description: The Guild ID the user belongs to
        - name: user_id
          in: path
          schema:
            type: integer
          required: true
          description: The User ID you would like to fetch warning data for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWarnings"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Guild/User ID not found
  /warnings/{warning_id}:
    delete:
      tags:
        - Warnings
      summary: This route will delete a given warning
      parameters:
        - name: warning_id
          in: path
          schema:
            type: string
          required: true
          description: The Warning ID you would like to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyObject"
        "401":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          description: Warning ID not found
components:
  responses:
    NotAuthorized:
      description: You are not authorized to access this resource
  securitySchemes:
    APIKey:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    EmptyObject:
      type: object
    GuildXP:
      type: array
      items:
        $ref: "#/components/schemas/UserXP"
    UserXP:
      type: object
      properties:
        UserGuildID:
          type: integer
          description: The UserGuildID
          example: 1
        XP:
          type: integer
          description: The current XP value
          example: 100
        Level:
          type: integer
          description: The current level
          example: 1
        XPLock:
          type: integer
          format: int64
          description: The Unix timestamp at which this user can start gaining XP from messages, in whole number of seconds
          example: 1671727778
        VoiceChannelXPLock:
          type: integer
          format: int64
          description: The Unix timestamp at which this user can start gaining XP from voice activity, in whole number of seconds
          example: 1671727784
    ReplaceUserXPInput:
      type: object
      properties:
        XP:
          type: integer
          description: The new XP value
          example: 100
          required: true
        Level:
          type: integer
          description: The new level
          example: 1
          required: true
        XPLock:
          type: integer
          format: int64
          description: The Unix timestamp at which this user can start gaining XP from messages, in whole number of seconds
          example: 1671727778
          required: true
        VoiceChannelXPLock:
          type: integer
          format: int64
          description: The Unix timestamp at which this user can start gaining XP from voice activity, in whole number of seconds
          example: 1671727784
          required: true
    GuildWarnings:
      type: array
      items:
        $ref: "#/components/schemas/UserWarning"
    UserWarning:
      type: object
      properties:
        WarningID:
          type: string
          format: uuid
          description: The Warning ID
        UserGuildID:
          type: integer
          description: The UserGuildID
          example: 231
        Reason:
          type: string
          description: The reason behind the warning
          example: "Chat Spam"
        Time:
          type: integer
          format: int64
          description: The Unix timestamp at which the user was warned, in whole number of seconds
          example: 1671727778
        AdminID:
          type: integer
          description: The ID of the administrator who distributed the warning
          example: 381
    UserWarnings:
      type: array
      items:
        $ref: "#/components/schemas/UserWarning"
    UserWarningRequest:
      type: object
      properties:
        reason:
          type: string
          description: The reason behind the warning
          example: "Chat Spamming"
        adminID:
          type: integer
          description: The ID of the administrator who distributed the warning
          example: 124
    Settings:
      type: object
      example:
        setting_1: true
        setting_2: false
        setting_3: {}
    UserXPRequest:
      type: object
      example:
        XP: 100
        VoiceChannelXPLock: 16717274013
security:
  - APIKey: []
